// Code generated by MockGen. DO NOT EDIT.
// Source: internal\pkg\persona\usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	models "RSOI/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUsecase is a mock of IUsecase interface.
type MockIUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseMockRecorder
}

// MockIUsecaseMockRecorder is the mock recorder for MockIUsecase.
type MockIUsecaseMockRecorder struct {
	mock *MockIUsecase
}

// NewMockIUsecase creates a new mock instance.
func NewMockIUsecase(ctrl *gomock.Controller) *MockIUsecase {
	mock := &MockIUsecase{ctrl: ctrl}
	mock.recorder = &MockIUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsecase) EXPECT() *MockIUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUsecase) Create(persona *models.PersonaRequest) (uint, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", persona)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIUsecaseMockRecorder) Create(persona interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUsecase)(nil).Create), persona)
}

// Read mocks base method.
func (m *MockIUsecase) Read(id uint) (*models.PersonaResponse, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", id)
	ret0, _ := ret[0].(*models.PersonaResponse)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockIUsecaseMockRecorder) Read(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIUsecase)(nil).Read), id)
}

// ReadAll mocks base method.
func (m *MockIUsecase) ReadAll() ([]*models.PersonaResponse, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll")
	ret0, _ := ret[0].([]*models.PersonaResponse)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockIUsecaseMockRecorder) ReadAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockIUsecase)(nil).ReadAll))
}

// Update mocks base method.
func (m *MockIUsecase) Update(id uint, persona *models.PersonaRequest) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, persona)
	ret0, _ := ret[0].(int)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIUsecaseMockRecorder) Update(id, persona interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUsecase)(nil).Update), id, persona)
}

// Delete mocks base method.
func (m *MockIUsecase) Delete(id uint) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(int)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIUsecaseMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUsecase)(nil).Delete), id)
}
